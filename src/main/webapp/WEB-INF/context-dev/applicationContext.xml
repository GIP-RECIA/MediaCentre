<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright Â© 2017 GIP-RECIA (https://www.recia.fr/)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
			 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
			 xmlns:c="http://www.springframework.org/schema/c" xmlns:p="http://www.springframework.org/schema/p"
			 xmlns:util="http://www.springframework.org/schema/util"
			 xmlns:cache="http://www.springframework.org/schema/cache"
			 xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
  http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
  http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">


<!-- DEV -->

	<!-- This is the root Spring WebApplicationContext. Place in this context 
		the service, dao, and utility-level beans the web tier will access. NOTE: 
		If you have multiple portlets in portlet.xml, you can move beans from the 
		web-tier Spring WebApplicationContext to the root context to avoid having 
		the bean definitions duplicated. -->

	<!--
    | Supports encrypted properties within the location(s) listed in this
    | bean.  The password is the environment variable "UP_JASYPT_KEY"
    | (see http://www.jasypt.org/).
    +-->
	<bean id="propertyConfigurer" class="org.springframework.context.support.PortalPropertySourcesPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:configuration.properties</value>
				<!--
                 | The following optional files allow deployers to set or override most
                 | configuration settings in a manner that is outside the footprint of the
                 | build/deploy cycle and SCM.
                 |
                 | Reasons for choosing that may include:
                 |   - Desire to keep sensitive information out of your Git repository
                 |   - Ability to change some common settings without a full build and deploy cycle
                 |   - Building a WAR/EAR that is environment-independent
                 |
                 | Any property defined in the above files that is referenced in the Spring context
                 | may be overridden in one (or both) of these files.  Later files override earlier
                 | files.
                 |
                 | The conventional location of ${portal.home} is ${catalina.base}/portal;  but you
                 | can (typically) override that location using a PORTAL_HOME environment variable.
                 | (Ultimately it depends on your setenv.sh or setenv.bat file.)
                 |
                 | The first file (global.properties) may contain properties that are shared with
                 | other modules (e.g. portlets) in Tomcat.  Several Apereo portlets source
                 | global.properties automatically.  The second file (simple-cms.properties) is
                 | (should be) sourced by this module exclusively.
                 +-->
				<value>file:${portal.home}/global.properties</value>
				<value>file:${portal.home}/mediacentre.properties</value>
			</list>
		</property>
	</bean>

	<context:component-scan base-package="org.esco.portlet.mediacentre.service" />
	<context:annotation-config />
	<cache:annotation-driven />

	<context:component-scan base-package="org.esco.portlet.mediacentre.dao" />


<!-- 	<bean id="userResource" class="org.esco.portlet.mediacentre.dao.impl.UserResourceImpl"> -->
		<!--<property name="currentEtabCodeInfoKey" value="${userInfo.key.currentEtabId}" />-->
<!-- 		<property name="mockedUserResource" ref="userResourceMock"/> -->
<!-- 	</bean> -->
	<!--<bean id="mediaCentreResource" class="org.esco.portlet.mediacentre.dao.impl.MediaCentreResourceGsonImpl" />-->
	<bean id="mediaCentreResource" class="org.esco.portlet.mediacentre.dao.impl.MediaCentreResourceJacksonImpl" />

	<bean id="userResource" class="org.esco.portlet.mediacentre.dao.impl.MockUserResourceImpl">
<!-- 		<property name="uidInfoKey" value="${userInfo.key.uid}"></property> -->
<!-- 		<property name="etabCodesInfoKey" value="${userInfo.key.etabIds}"></property> -->
<!-- 		<property name="currentEtabCodeInfoKey" value="${userInfo.key.currentEtabId}"></property> -->
<!-- 		<property name="profilsInfoKey" value="${userInfo.key.profils}"></property> -->
<!-- 		<property name="userGroupsInfokey" value="${userInfo.key.groups}"></property> -->
	</bean>
<!-- 	<bean id="mediaCentreResourceMock" class="org.esco.portlet.mediacentre.dao.impl.MockHelpInfoResourceImpl" /> -->

	<bean id="preferenceResource" class="org.esco.portlet.mediacentre.dao.impl.MockPreferenceResourceImpl" />
<!-- 	<bean id="preferenceResource" class="org.esco.portlet.mediacentre.dao.impl.PreferenceResourceImpl" /> -->


	<bean id="jsonHttpMessageConverter"
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>application/json</value>
				<value>application/octet-stream</value>
				<value>text/plain;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!--<bean id="hostnameVerifier" class="org.esco.portlet.mediacentre.dao.util.EscoHostnameVerifier" p:trustedDomains="${hostnames.trusted}" />-->

	<!-- 	based on org.apache.http.impl.client.HttpClients.createSystem -->
	<bean id="httpClientBuilder" class="org.apache.http.impl.client.HttpClientBuilder"
				factory-method="create">
		<!--<property name="SSLHostnameVerifier" ref="hostnameVerifier" />-->
	</bean>

	<bean name="httpClient" factory-bean="httpClientBuilder" factory-method="build" />

	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
		<constructor-arg>
			<bean class="org.springframework.http.client.HttpComponentsClientHttpRequestFactory"
						p:readTimeout="15000"
						p:connectTimeout="5000"
					  p:connectionRequestTimeout="5000">
				<property name="httpClient" ref="httpClient" />
			</bean>
		</constructor-arg>
		<property name="messageConverters">
			<list><ref bean="jsonHttpMessageConverter"/></list>
		</property>
	</bean>

	<bean id="cacheManager"
				class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="ehcache"/>
	</bean>

	<bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache.xml"/>
		<property name="shared" value="true"/>
	</bean>

</beans>
